@model OrderForPersonContainer
@{
    var title = "امر شغل";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container--default .select2-selection--single {
        height: 38px !important;
        padding: 6px 12px;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        background-color: #fff;
        font-size: 1rem;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 24px;
            color: #495057;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 100%;
            right: 6px;
        }

    .select2-container {
        width: 100% !important;
    }
</style>

<div id="app">

    <!-- Client Info -->
    <card title="بيانات العميل" addational-class="fa-list-ol" text-color-class="text-white" header-class="bg-primary">
        <div class="container">
            <div class="row">
                <div class="col-6">
                    <label>اسم العميل</label>
                    <input class="form-control" v-model="Order.ClientName" />
                </div>
                <div class="col-6">
                    <label>التليفون</label>
                    <input class="form-control" v-model="Order.ClientPhone" />
                </div>
            </div>
        </div>
    </card>

    <!-- Order Details Table -->
    <card title="تفاصيل امر الشغل" addational-class="fa-list-ol" text-color-class="text-white" header-class="bg-primary">
        <table class="table table-bordered table-striped table-hover">
            <thead class="bg-primary text-white">
                <tr>
                    <th>المنتج</th>
                    <th style="width:10%">الكمية</th>
                    <th>ملاحظات</th>
                    <th>
                        <button class="btn btn-dark" @@click="addItem">
                            <span class="fa fa-plus"></span>
                        </button>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(item, index) in OrderDetail" :key="index">
                    <td>
                        <select class="form-select product-select" :data-index="index"></select>
                    </td>
                    <td>
                        <input type="number" class="form-control" v-model="item.QTY" @@input ="updateItem(item, index)" />
                    </td>
                    <td>
                        <textarea class="form-control" rows="1" v-model="item.Notes" @@input ="updateItem(item, index)"></textarea>
                    </td>
                    <td>
                        <button class="btn btn-danger" @@click="removeItem(index)">
                            <span class="fa fa-minus"></span>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </card>

    <!-- Order Summary -->
    <card title="بيانات امر الشغل" addational-class="fa-list-ol" text-color-class="text-white" header-class="bg-primary">
        <div class="container">
            <div class="row">
                <div class="col-4">
                    <label>تاريخ امر الشغل</label>
                    <input type="date" class="form-control" v-model="Order.OrderDate" />
                </div>
                <div class="col-4">
                    <label>تاريخ التسليم</label>
                    <input type="date" class="form-control" v-model="Order.DeliveryOrder" />
                </div>
                <div class="col-4">
                    <label>اجمالي الكمية</label>
                    <input class="form-control" :value="totalAmount" disabled />
                </div>
            </div>
        </div>
    </card>

    <!-- Save Button -->
    <card-footer>
        <button class="btn btn-success" @@click="save">حفظ</button>
    </card-footer>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        const rawData = @Html.Raw(data);

        const app = Vue.createApp({
            data() {
                const formatToISO = (dateStr) => {
                    if (!dateStr || dateStr.includes('-')) return dateStr;
                    const parts = dateStr.split('/');
                    if (parts.length !== 3) return '';
                    const [day, month, year] = parts;
                    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                };

                return {
                    Order: {
                        ...rawData.Order,
                        OrderDate: formatToISO(rawData.Order.OrderDate),
                        DeliveryOrder: formatToISO(rawData.Order.DeliveryOrder)
                    },
                    OrderDetail: rawData.OrderDetail || []
                };
            },

            computed: {
                totalAmount() {
                    return this.OrderDetail.reduce((sum, item) => {
                        return sum + parseFloat(item.QTY || 0);
                    }, 0);
                }
            },

            methods: {
                addItem() {
                    const lastItem = this.OrderDetail[this.OrderDetail.length - 1];

                    if (
                        lastItem &&
                        (
                            !lastItem.ProductId || lastItem.ProductId === 0 ||
                            !lastItem.QTY || lastItem.QTY <= 0
                        )
                    ) {
                        alert("يرجى اختيار المنتج وإدخال كمية صحيحة قبل إضافة صف جديد.");
                        this.$nextTick(() => {
                            const $select = $(`select.product-select[data-index="${this.OrderDetail.length - 1}"]`);
                            if ($select.length) {
                                $select.select2('open');
                                $select.closest('tr').addClass('table-danger');
                            }
                        });
                        return;
                    }

                    // ✅ Add new row
                    const newItem = {
                        ProductId: 0,
                        ProductName: '',
                        QTY: 0,
                        UnitPrice: 0,
                        ManfactId: null,
                        Notes: '',
                        IsManufacturing: false
                    };

                    this.OrderDetail.push({ ...newItem });
                    this.$nextTick(() => this.initSelect2(this.OrderDetail.length - 1));
                },

                updateItem(item, index) {
                    const $row = $(`select.product-select[data-index="${index}"]`).closest('tr');
                    if (item.ProductId > 0 && item.QTY > 0) {
                        $row.removeClass('table-danger');
                    }
                },

                removeItem(index) {
                    this.OrderDetail.splice(index, 1);
                },

                initSelect2(index) {
                    const self = this;
                    const $select = $(`select.product-select[data-index="${index}"]`);

                    $select.select2({
                        placeholder: "اختر المنتج",
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '/Store/StoreItems/SearchItems',
                            dataType: 'json',
                            delay: 300,
                            cache: true,
                            data: params => ({
                                term: params.term || '',
                                page: params.page || 1,
                                pageSize: 10
                            }),
                            processResults: (data) => {
                                return {
                                    results: data.items.map(x => ({
                                        id: x.Id,
                                        text: x.ProductName
                                    }))
                                };
                            }
                        }
                    }).on('select2:select', function (e) {
                        const selected = e.params.data;
                        const selectedId = selected.id;

                        // ❌ Check for duplicates
                        const isDuplicate = self.OrderDetail.some((item, i) => i !== index && item.ProductId === selectedId);
                        if (isDuplicate) {
                            alert("هذا المنتج تم اختياره مسبقًا.");
                            $(this).val(null).trigger('change');
                            return;
                        }

                        // ✅ Assign selected values
                        const item = self.OrderDetail[index];
                        item.ProductId = selected.id;
                        item.ProductName = selected.text;
                        self.updateItem(item, index);
                    });
                },

                formatToEgyptian(dateStr) {
                    if (!dateStr) return '';
                    const [year, month, day] = dateStr.split('-');
                    return `${day}/${month}/${year}`;
                },

                save() {
                    if (!this.Order.ClientName || !this.Order.ClientPhone) {
                        alert("يرجى إدخال اسم العميل ورقم الهاتف.");
                        return;
                    }

                    if (!this.Order.OrderDate || !this.Order.DeliveryOrder) {
                        alert("يرجى إدخال تاريخ أمر الشغل وتاريخ التسليم.");
                        return;
                    }

                    if (new Date(this.Order.DeliveryOrder) < new Date(this.Order.OrderDate)) {
                        alert("تاريخ التسليم يجب أن يكون بعد أو مساوي لتاريخ أمر الشغل.");
                        return;
                    }

                    const invalidIndex = this.OrderDetail.findIndex(item =>
                        !item.ProductId || item.ProductId === 0 ||
                        !item.QTY || item.QTY <= 0
                    );

                    if (invalidIndex !== -1) {
                        alert(`السطر رقم ${invalidIndex + 1} غير مكتمل. يرجى اختيار المنتج وإدخال كمية صحيحة.`);
                        this.$nextTick(() => {
                            const $select = $(`select.product-select[data-index="${invalidIndex}"]`);
                            if ($select.length) {
                                $select.select2('open');
                                $select.closest('tr').addClass('table-danger');
                            }
                        });
                        return;
                    }

                    const hasValidRow = this.OrderDetail.some(x => x.ProductId > 0 && x.QTY > 0);
                    if (!hasValidRow) {
                        alert("يجب إدخال منتج واحد على الأقل بكمية صحيحة.");
                        return;
                    }

                    const payload = {
                        Order: {
                            ...this.Order,
                            OrderDate: this.formatToEgyptian(this.Order.OrderDate),
                            DeliveryOrder: this.formatToEgyptian(this.Order.DeliveryOrder),
                            TotalAmount: this.totalAmount
                        },
                        OrderDetail: this.OrderDetail
                    };

                    axios.post('/Orders/SaveOrderForPerson', payload)
                        .then(res => {
                            alert('تم الحفظ بنجاح');
                            window.location = res.data.newLocation;
                        })
                        .catch(err => {
                            alert('فشل الحفظ');
                            console.error(err);
                        });
                }
            },

            mounted() {
                this.OrderDetail.forEach((item, index) => {
                    this.$nextTick(() => {
                        this.initSelect2(index);
                        if (item.ProductId && item.ProductName) {
                            const $select = $(`select.product-select[data-index="${index}"]`);
                            const option = new Option(item.ProductName, item.ProductId, true, true);
                            $select.append(option).trigger('change');
                        }
                    });
                });
            }
        });

        app.mount('#app');
    </script>
}
