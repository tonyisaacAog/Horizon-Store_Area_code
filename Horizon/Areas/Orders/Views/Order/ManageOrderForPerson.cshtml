@model OrderForPersonContainer
@{
    var title = "امر شغل";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container--default .select2-selection--single {
        height: 48px !important;
        padding: 6px 12px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        background-color: #fff;
        font-size: 1rem;
        line-height: 1.5;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 36px;
        color: #374151;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 100%;
        right: 6px;
    }

    .select2-container {
        width: 100% !important;
    }

    .select2-dropdown {
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }
</style>

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#212b36" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14,2 14,8 20,8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10,9 9,9 8,9"></polyline>
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <a href="/Orders/Order/Index"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </a>
    </div>

    <!-- Client Information Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات العميل</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم العميل</label>
                    <input type="text" v-model="Order.ClientName"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">التليفون</label>
                    <input type="text" v-model="Order.ClientPhone"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-[48px]">
                </div>
            </div>
        </div>
    </div>

    <!-- Order Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center justify-between border-b">
            <div class="flex items-center">
                <h2 class="text-lg font-semibold">تفاصيل امر الشغل</h2>
            </div>
            <button @@click="addItem"
                class="bg-sky-900 hover:bg-sky-700 text-white px-3 py-1 rounded flex items-center">
                <i class="fas fa-plus ml-2"></i> إضافة
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right">المنتج</th>
                        <th class="px-6 py-3 text-right">الكمية</th>
                        <th class="px-6 py-3 text-right">ملاحظات</th>
                        <th class="px-6 py-3 text-right">إجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(item, index) in OrderDetail" :key="index">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <select
                                class="product-select w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                                :data-index="index"></select>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="number" v-model="item.QTY" @@input="updateItem(item, index)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <textarea v-model="item.Notes" @@input="updateItem(item, index)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px] resize-none"></textarea>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button @@click="removeItem(index)" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-minus"></i>
                            </button>
                        </td>
                    </tr>
                    <tr v-if="OrderDetail.length === 0">
                        <td colspan="4" class="text-center text-lg text-gray-500 py-6">لا توجد عناصر للعرض</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Order Summary Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات امر الشغل</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ امر الشغل</label>
                    <input type="date" v-model="Order.OrderDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ التسليم</label>
                    <input type="date" v-model="Order.DeliveryOrder"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اجمالي الكمية</label>
                    <input type="text" :value="totalAmount" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500 h-[48px]">
                </div>
            </div>
            <!-- Action Buttons -->
            <div class="flex justify-end gap-4 mb-6  mt-10">
                <button @@click="save"
                    class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-save"></i>
                    حفظ
                </button>
                <a v-if="Order.Id > 0" :href="'/Orders/Order/PrintOrder/' + Order.Id"
                    class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-print"></i>
                    طباعة أمر الشغل
                </a>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.full.min.js"></script>

    <script>
        const rawData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                                <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                                    <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                                        <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                            <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                                            <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="p-4">
                                            <ul class="space-y-2">
                                                <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                                            </ul>
                                        </div>
                                        <div class="p-4 border-t border-gray-200 flex justify-end">
                                            <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-800 text-white rounded-md hover:bg-blue-900">
                                                موافق
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const app = Vue.createApp({
            components: {
                Messages
            },
            data() {
                const formatToISO = (dateStr) => {
                    if (!dateStr || dateStr.includes('-')) return dateStr;
                    const parts = dateStr.split('/');
                    if (parts.length !== 3) return '';
                    const [day, month, year] = parts;
                    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                };

                return {
                    title: "امر شغل",
                    messages: [],
                    Order: {
                        ...rawData.Order,
                        OrderDate: formatToISO(rawData.Order.OrderDate),
                        DeliveryOrder: formatToISO(rawData.Order.DeliveryOrder)
                    },
                    OrderDetail: rawData.OrderDetail || []
                };
            },

            computed: {
                totalAmount() {
                    return this.OrderDetail.reduce((sum, item) => {
                        return sum + parseFloat(item.QTY || 0);
                    }, 0);
                }
            },

            methods: {
                addItem() {
                    const lastItem = this.OrderDetail[this.OrderDetail.length - 1];

                    if (lastItem && (
                        !lastItem.ProductId || lastItem.ProductId === 0 ||
                        !lastItem.QTY || lastItem.QTY <= 0
                    )) {
                        this.messages.push("يرجى اختيار المنتج وإدخال كمية صحيحة قبل إضافة صف جديد.");
                        return;
                    }

                    const newItem = {
                        ProductId: 0,
                        ProductName: '',
                        QTY: 0,
                        UnitPrice: 0,
                        ManfactId: null,
                        Notes: '',
                        IsManufacturing: false
                    };

                    this.OrderDetail.push({ ...newItem });
                    this.$nextTick(() => this.initSelect2(this.OrderDetail.length - 1));
                },

                updateItem(item, index) {
                    // This method can be used for any additional logic when item is updated
                },

                removeItem(index) {
                    this.OrderDetail.splice(index, 1);
                },

                initSelect2(index) {
                    const self = this;
                    const $select = $(`select.product-select[data-index="${index}"]`);

                    $select.select2({
                        placeholder: "اختر المنتج",
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '/Store/StoreItems/SearchItems',
                            dataType: 'json',
                            delay: 300,
                            cache: true,
                            data: params => ({
                                term: params.term || '',
                                page: params.page || 1,
                                pageSize: 10
                            }),
                            processResults: (data) => {
                                return {
                                    results: data.items.map(x => ({
                                        id: x.Id,
                                        text: x.ProductName
                                    }))
                                };
                            }
                        }
                    }).on('select2:select', function (e) {
                        const selected = e.params.data;
                        const selectedId = selected.id;

                        // Check for duplicates
                        const isDuplicate = self.OrderDetail.some((item, i) => i !== index && item.ProductId === selectedId);
                        if (isDuplicate) {
                            self.messages.push("هذا المنتج تم اختياره مسبقًا.");
                            $(this).val(null).trigger('change');
                            return;
                        }

                        // Assign selected values
                        const item = self.OrderDetail[index];
                        item.ProductId = selected.id;
                        item.ProductName = selected.text;
                        self.updateItem(item, index);
                    });
                },

                formatToEgyptian(dateStr) {
                    if (!dateStr) return '';
                    const [year, month, day] = dateStr.split('-');
                    return `${day}/${month}/${year}`;
                },

                clearMessages() {
                    this.messages = [];
                },

                save() {
                    this.messages = [];

                    if (!this.Order.ClientName || !this.Order.ClientPhone) {
                        this.messages.push("يرجى إدخال اسم العميل ورقم الهاتف.");
                        return;
                    }

                    if (!this.Order.OrderDate || !this.Order.DeliveryOrder) {
                        this.messages.push("يرجى إدخال تاريخ أمر الشغل وتاريخ التسليم.");
                        return;
                    }

                    if (new Date(this.Order.DeliveryOrder) < new Date(this.Order.OrderDate)) {
                        this.messages.push("تاريخ التسليم يجب أن يكون بعد أو مساوي لتاريخ أمر الشغل.");
                        return;
                    }

                    const invalidIndex = this.OrderDetail.findIndex(item =>
                        !item.ProductId || item.ProductId === 0 ||
                        !item.QTY || item.QTY <= 0
                    );

                    if (invalidIndex !== -1) {
                        this.messages.push(`السطر رقم ${invalidIndex + 1} غير مكتمل. يرجى اختيار المنتج وإدخال كمية صحيحة.`);
                        return;
                    }

                    const hasValidRow = this.OrderDetail.some(x => x.ProductId > 0 && x.QTY > 0);
                    if (!hasValidRow) {
                        this.messages.push("يجب إدخال منتج واحد على الأقل بكمية صحيحة.");
                        return;
                    }

                    const payload = {
                        Order: {
                            ...this.Order,
                            OrderDate: this.formatToEgyptian(this.Order.OrderDate),
                            DeliveryOrder: this.formatToEgyptian(this.Order.DeliveryOrder),
                            TotalAmount: this.totalAmount
                        },
                        OrderDetail: this.OrderDetail
                    };

                    axios.post('/Orders/Order/SaveOrderForPerson', payload)
                        .then(res => {
                            setTimeout(() => {
                                window.location = res.data.newLocation;
                            }, 1000);
                        })
                        .catch(err => {
                            this.messages.push('حدث خطأ أثناء الحفظ');
                            console.error(err);
                        });
                }
            },

            mounted() {
                this.OrderDetail.forEach((item, index) => {
                    this.$nextTick(() => {
                        this.initSelect2(index);
                        if (item.ProductId && item.ProductName) {
                            const $select = $(`select.product-select[data-index="${index}"]`);
                            const option = new Option(item.ProductName, item.ProductId, true, true);
                            $select.append(option).trigger('change');
                        }
                    });
                });
            }
        });

        app.mount('#app');
    </script>
}