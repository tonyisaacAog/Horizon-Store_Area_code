@model Horizon.Areas.Purchases.ViewModel.PurchaseOrderVMs.PurchaseOrderVM
@{
    var title = "إدارة أمر الشراء";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container--default .select2-selection--single {
        height: 48px !important;
        padding: 6px 12px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        background-color: #fff;
        font-size: 1rem;
        line-height: 1.5;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 36px;
        color: #374151;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 100%;
        right: 6px;
    }

    .select2-container {
        width: 100% !important;
    }

    .select2-dropdown {
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }
</style>

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#212b36" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14,2 14,8 20,8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10,9 9,9 8,9"></polyline>
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <a href="/Purchases/PurchaseOrder/Index"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </a>
    </div>

    <!-- Purchase Order Information Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات أمر الشراء</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="md:col-span-3">
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المورد</label>
                    <select id="supplier-select"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"></select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ أمر الشراء</label>
                    <input type="date" v-model="PurchaseOrderDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ التوريد</label>
                    <input type="date" v-model="DeliveryDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                </div>
            </div>
        </div>
    </div>

    <!-- Products Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center justify-between border-b">
            <div class="flex items-center">
                <h2 class="text-lg font-semibold">تفاصيل المنتجات</h2>
            </div>
            <button @@click="addItem"
                class="bg-sky-900 hover:bg-sky-700 text-white px-3 py-1 rounded flex items-center">
                <i class="fas fa-plus ml-2"></i> إضافة
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right">المنتج</th>
                        <th class="px-6 py-3 text-right">الكمية</th>
                        <th class="px-6 py-3 text-right">ملاحظات</th>
                        <th class="px-6 py-3 text-right">إجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(item, index) in PurchaseOrderDetails" :key="index" v-show="item.RecordStatus !== 2">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <select
                                class="product-select w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                                :data-index="index"></select>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="number" v-model="item.StoreItemAmount" @@change="updateItem(item)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <textarea v-model="item.Notes" @@change="updateItem(item)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px] resize-none"></textarea>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button @@click="removeItem(item)" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-minus"></i>
                            </button>
                        </td>
                    </tr>
                    <tr v-if="PurchaseOrderDetails.length === 0">
                        <td colspan="4" class="text-center text-lg text-gray-500 py-6">لا توجد عناصر ضف للعرض </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Raw Materials Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center justify-between border-b">
            <div class="flex items-center">
                <h2 class="text-lg font-semibold">تفاصيل المواد الخام</h2>
            </div>
            <button @@click="addItemRaw"
                class="bg-sky-900 hover:bg-sky-700 text-white px-3 py-1 rounded flex items-center">
                <i class="fas fa-plus ml-2"></i> إضافة
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right">العنصر</th>
                        <th class="px-6 py-3 text-right">الكمية</th>
                        <th class="px-6 py-3 text-right">ملاحظات</th>
                        <th class="px-6 py-3 text-right">إجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(item, index) in PurchaseOrderItemRawDetails" :key="index"
                        v-show="item.RecordStatus !== 2">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <select
                                class="rawitem-select w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                                :data-index="index"></select>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="number" v-model="item.StoreItemAmount" @@change="updateItemRaw(item)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <textarea v-model="item.Notes" @@change="updateItemRaw(item)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px] resize-none"></textarea>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button @@click="removeItemRaw(item)" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-minus"></i>
                            </button>
                        </td>
                    </tr>
                    <tr v-if="PurchaseOrderItemRawDetails.length === 0">
                        <td colspan="4" class="text-center text-lg text-gray-500 py-6">لا توجد عناصر ضف للعرض </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Notes Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center justify-between border-b">
            <div class="flex items-center">
                <h2 class="text-lg font-semibold">ملاحظات أمر الشراء</h2>
            </div>
            <button @@click="addNote"
                class="bg-sky-900 hover:bg-sky-700 text-white px-3 py-1 rounded flex items-center">
                <i class="fas fa-plus ml-2"></i> إضافة
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right">ملاحظات</th>
                        <th class="px-6 py-3 text-right">إجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(note, idx) in Notes" :key="idx">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <textarea v-model="note.Note"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px] resize-none"></textarea>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button @@click="removeNote(idx)" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-minus"></i>
                            </button>
                        </td>
                    </tr>
                    <tr v-if="Notes.length === 0">
                        <td colspan="2" class="text-center text-lg text-gray-500 py-6">لا توجد عناصر ضف للعرض </td>
                    </tr>
                </tbody>
            </table>
            <div class="flex justify-end gap-4 pt-6 p-6 border-t">
                <button @@click="save"
                    class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-save"></i>
                    حفظ
                </button>
                <a v-if="Id > 0" :href="'/Purchases/PurchaseOrder/PrintPurchaseOrder/' + Id"
                    class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-print"></i>
                    طباعة أمر الشراء
                </a>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.full.min.js"></script>
    <script>
        const rawData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                        <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                                <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                    <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                                    <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="p-4">
                                    <ul class="space-y-2">
                                        <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                                    </ul>
                                </div>
                                <div class="p-4 border-t border-gray-200 flex justify-end">
                                    <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-800 text-white rounded-md hover:bg-blue-900">
                                        موافق
                                    </button>
                                </div>
                            </div>
                        </div>
                    `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const app = Vue.createApp({
            components: {
                Messages
            },
            data() {
                const formatDate = (dateStr) => {
                    if (!dateStr) return '';
                    const parts = dateStr.split('/');
                    if (parts.length !== 3) return '';
                    const [day, month, year] = parts;
                    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                };
                return {
                    title: "إدارة أمر الشراء",
                    messages: [],
                    Id: rawData.Id,
                    PurchaseOrderNumber: rawData.PurchaseOrderNumber,
                    PurchaseOrderDate: formatDate(rawData.PurchaseOrderDate),
                    DeliveryDate: formatDate(rawData.DeliveryDate),
                    SupplierId: rawData.SupplierId,
                    SupplierName: rawData.SupplierName,
                    TotalAmount: rawData.TotalAmount,
                    PurchaseOrderDetails: rawData.PurchaseOrderDetails.map(item => ({ ...item })),
                    PurchaseOrderItemRawDetails: rawData.PurchaseOrderItemRawDetails.map(item => ({ ...item })),
                    Notes: rawData.Notes || []
                };
            },
            methods: {
                addItem() {
                    const lastIndex = this.PurchaseOrderDetails.length - 1;
                    const lastItem = this.PurchaseOrderDetails[lastIndex];

                    if (lastItem && (
                        !lastItem.StoreItemId || lastItem.StoreItemId === 0 ||
                        !lastItem.StoreItemAmount || lastItem.StoreItemAmount <= 0
                    )) {
                        this.messages.push("يرجى اختيار المنتج وإدخال كمية صحيحة قبل إضافة صف جديد.");
                        return;
                    }

                    const newItem = {
                        Id: 0,
                        StoreItemId: 0,
                        StoreItemName: '',
                        StoreItemAmount: 0,
                        Notes: '',
                        RecordStatus: 0
                    };

                    this.PurchaseOrderDetails.push(newItem);
                    this.$nextTick(() => this.initProductSelect2(this.PurchaseOrderDetails.length - 1));
                },
                removeItem(item) {
                    const index = this.PurchaseOrderDetails.indexOf(item);
                    if (index > -1) {
                        this.PurchaseOrderDetails.splice(index, 1);
                    }
                },
                updateItem(item) {
                    if (item.RecordStatus !== 0) item.RecordStatus = 1;
                },
                updateItemRaw(item) {
                    if (item.RecordStatus !== 0) item.RecordStatus = 1;
                },
                addItemRaw() {
                    const lastIndex = this.PurchaseOrderItemRawDetails.length - 1;
                    const lastItem = this.PurchaseOrderItemRawDetails[lastIndex];

                    if (lastItem && (
                        !lastItem.StoreItemId || lastItem.StoreItemId === 0 ||
                        !lastItem.StoreItemAmount || lastItem.StoreItemAmount <= 0
                    )) {
                        this.messages.push("يرجى اختيار المادة الخام وإدخال كمية صحيحة قبل إضافة صف جديد.");
                        return;
                    }

                    const newItem = {
                        Id: 0,
                        StoreItemId: 0,
                        StoreItemName: '',
                        StoreItemAmount: 0,
                        Notes: '',
                        RecordStatus: 0
                    };

                    this.PurchaseOrderItemRawDetails.push(newItem);
                    this.$nextTick(() => this.initRawItemSelect2(this.PurchaseOrderItemRawDetails.length - 1));
                },
                removeItemRaw(item) {
                    const index = this.PurchaseOrderItemRawDetails.indexOf(item);
                    if (index > -1) {
                        this.PurchaseOrderItemRawDetails.splice(index, 1);
                    }
                },
                addNote() {
                    const lastNote = this.Notes[this.Notes.length - 1];
                    if (!lastNote || (lastNote.Note && lastNote.Note.trim() !== '')) {
                        this.Notes.push({ Id: 0, Note: '' });
                    } else {
                        this.messages.push("يرجى كتابة الملاحظة الحالية قبل إضافة ملاحظة جديدة.");
                    }
                },
                removeNote(idx) {
                    this.Notes.splice(idx, 1);
                },
                initProductSelect2(index) {
                    const self = this;
                    const $select = $(`select.product-select[data-index="${index}"]`);
                    $select.select2({
                        placeholder: "ابحث عن منتج...",
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '/Store/StoreItems/SearchItems',
                            dataType: 'json',
                            delay: 300,
                            cache: true,
                            data: params => ({
                                term: params.term || '',
                                page: params.page || 1,
                                pageSize: 10
                            }),
                            processResults: (data, params) => {
                                params.page = params.page || 1;
                                return {
                                    results: data.items.map(x => ({ id: x.Id, text: x.ProductName })),
                                    pagination: {
                                        more: data.hasMore
                                    }
                                };
                            }
                        }
                    }).on('select2:select', function (e) {
                        const selected = e.params.data;
                        const duplicate = self.PurchaseOrderDetails.some((x, idx) =>
                            x.StoreItemId === selected.id && x.RecordStatus !== 2 && idx !== index);

                        if (duplicate) {
                            self.messages.push("هذا المنتج مضاف بالفعل.");
                            $(this).val(null).trigger('change');
                            return;
                        }

                        const item = self.PurchaseOrderDetails[index];
                        item.StoreItemId = selected.id;
                        item.StoreItemName = selected.text;
                        item.RecordStatus = item.Id === 0 ? 0 : 1;
                    });
                },
                initRawItemSelect2(index) {
                    const self = this;
                    const $select = $(`select.rawitem-select[data-index="${index}"]`);
                    $select.select2({
                        placeholder: "ابحث عن مادة خام...",
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '/Store/StoreItemRaw/SearchRawItems',
                            dataType: 'json',
                            delay: 300,
                            cache: true,
                            data: params => ({
                                term: params.term || '',
                                page: params.page || 1,
                                pageSize: 10
                            }),
                            processResults: (data, params) => {
                                params.page = params.page || 1;
                                return {
                                    results: data.items.map(x => ({ id: x.Id, text: x.ItemName })),
                                    pagination: {
                                        more: data.hasMore
                                    }
                                };
                            }
                        }
                    }).on('select2:select', function (e) {
                        const selected = e.params.data;
                        const duplicate = self.PurchaseOrderItemRawDetails.some((x, idx) =>
                            x.StoreItemId === selected.id && x.RecordStatus !== 2 && idx !== index);

                        if (duplicate) {
                            self.messages.push("هذه المادة الخام مضافة بالفعل.");
                            $(this).val(null).trigger('change');
                            return;
                        }
                        const item = self.PurchaseOrderItemRawDetails[index];
                        item.StoreItemId = selected.id;
                        item.StoreItemName = selected.text;
                        item.RecordStatus = item.Id === 0 ? 0 : 1;
                    });
                },
                initSupplierSelect() {
                    const self = this;
                    $('#supplier-select').select2({
                        placeholder: "اختر المورد",
                        allowClear: true,
                        ajax: {
                            url: '/Purchases/Supplier/GetSuppliers',
                            dataType: 'json',
                            delay: 300,
                            processResults: data => ({
                                results: data.items.map(x => ({ id: x.Id, text: x.SupplierName }))
                            })
                        }
                    }).val(this.SupplierId).trigger('change')
                        .on('select2:select', function (e) {
                            const selected = e.params.data;
                            self.SupplierId = selected.id;
                            self.SupplierName = selected.text;
                        });
                    if (this.SupplierId) {
                        const option = new Option(this.SupplierName, this.SupplierId, true, true);
                        $('#supplier-select').append(option).trigger('change');
                    }
                },
                clearMessages() {
                    this.messages = [];
                },
                save() {
                    this.messages = [];

                    if (!this.SupplierId || this.SupplierId === 0) {
                        this.messages.push("من فضلك اختر المورد.");
                        return;
                    }

                    if (!this.PurchaseOrderDate) {
                        this.messages.push("يرجى إدخال تاريخ أمر الشراء.");
                        return;
                    }

                    if (!this.DeliveryDate) {
                        this.messages.push("يرجى إدخال تاريخ التوريد.");
                        return;
                    }

                    if (new Date(this.DeliveryDate) < new Date(this.PurchaseOrderDate)) {
                        this.messages.push("تاريخ التوريد يجب أن يكون بعد أو مساوي لتاريخ أمر الشراء.");
                        return;
                    }

                    const invalidProductIndex = this.PurchaseOrderDetails.findIndex((item, idx) =>
                        item.RecordStatus !== 2 && (
                            !item.StoreItemId || item.StoreItemId === 0 ||
                            !item.StoreItemAmount || item.StoreItemAmount <= 0
                        )
                    );

                    if (invalidProductIndex !== -1) {
                        this.messages.push(`السطر رقم ${invalidProductIndex + 1} في تفاصيل المنتجات غير مكتمل. يرجى اختيار المنتج وإدخال كمية صحيحة.`);
                        return;
                    }

                    const invalidRawIndex = this.PurchaseOrderItemRawDetails.findIndex((item, idx) =>
                        item.RecordStatus !== 2 && (
                            !item.StoreItemId || item.StoreItemId === 0 ||
                            !item.StoreItemAmount || item.StoreItemAmount <= 0
                        )
                    );

                    if (invalidRawIndex !== -1) {
                        this.messages.push(`السطر رقم ${invalidRawIndex + 1} في تفاصيل المواد الخام غير مكتمل. يرجى اختيار المادة الخام وإدخال كمية صحيحة.`);
                        return;
                    }

                    const hasValidLine =
                        this.PurchaseOrderDetails.some(x => x.RecordStatus !== 2 && x.StoreItemId > 0) ||
                        this.PurchaseOrderItemRawDetails.some(x => x.RecordStatus !== 2 && x.StoreItemId > 0);

                    if (!hasValidLine) {
                        this.messages.push("يجب إضافة منتج واحد أو مادة خام واحدة على الأقل.");
                        return;
                    }

                    const filteredNotes = this.Notes.filter(note => note.Note && note.Note.trim() !== '');

                    axios.post('/Purchases/PurchaseOrder/SavePurchaseOrder', {
                        Id: this.Id,
                        PurchaseOrderNumber: this.PurchaseOrderNumber,
                        PurchaseOrderDate: this.PurchaseOrderDate,
                        DeliveryDate: this.DeliveryDate,
                        SupplierId: this.SupplierId,
                        TotalAmount: this.TotalAmount,
                        PurchaseOrderDetails: this.PurchaseOrderDetails,
                        PurchaseOrderItemRawDetails: this.PurchaseOrderItemRawDetails,
                        Notes: filteredNotes
                    }).then((response) => {
                        setTimeout(() => {
                            window.location = response.data.newLocation;
                        }, 1000);
                    }).catch(err => {
                        this.messages.push('حدث خطأ أثناء الحفظ');
                        console.error(err);
                    });
                }
            },
            mounted() {
                // Initialize product lines with Select2 and old data
                this.PurchaseOrderDetails.forEach((item, index) => {
                    this.$nextTick(() => {
                        this.initProductSelect2(index);

                        const $select = $(`select.product-select[data-index="${index}"]`);
                        if (item.StoreItemId && item.StoreItemName) {
                            const option = new Option(item.StoreItemName, item.StoreItemId, true, true);
                            $select.append(option).trigger('change');
                        }
                        $select.closest('tr').removeClass('table-danger');

                    });
                });

                // Initialize raw item lines with Select2 and old data
                this.PurchaseOrderItemRawDetails.forEach((item, index) => {
                    this.$nextTick(() => {
                        this.initRawItemSelect2(index);

                        const $select = $(`select.rawitem-select[data-index="${index}"]`);
                        if (item.StoreItemId && item.StoreItemName) {
                            const option = new Option(item.StoreItemName, item.StoreItemId, true, true);
                            $select.append(option).trigger('change');
                        }
                        $select.closest('tr').removeClass('table-danger');

                    });
                });

                // Supplier select init + set old value
                this.initSupplierSelect();

            }
        });

        app.mount('#app');


    </script>
}
