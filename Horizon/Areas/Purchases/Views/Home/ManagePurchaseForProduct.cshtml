@model PurchaseContainerForProduct
@{
    var title = "اذن اضافة خامات للمنتج";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" class="stroke-[#212b36]" viewBox="0 0 24 24"
                fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8l-5-5z" />
                <path d="M9 9h6" />
                <path d="M9 13h6" />
                <path d="M9 17h6" />
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <a href="@((Context.Request.Headers["Referer"].ToString() != string.Empty) ? Context.Request.Headers["Referer"].ToString() : Url.Action("Index", "Home", new { area = "Purchases" }))"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </a>
    </div>

    <!-- Product Data Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات المنتج</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المنتج</label>
                    <input v-model="storeItem.ProductName" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">نوع المنتج</label>
                    <input v-model="storeItem.FamilyName" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">ماركة المنتج</label>
                    <input v-model="storeItem.StoreBrandName" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">كمية المنتج</label>
                    <input v-model="storeItem.Quantity" @@change="updateTotalRaw"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                        type="number">
                    <span v-if="errors.Quantity" class="text-red-500 text-xs">{{ errors.Quantity }}</span>
                </div>
                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-1">اجمالى السعر</label>
                    <input v-model="purchaseInfo.PriceItemsRaw"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                        type="number">
                </div>
            </div>
        </div>
    </div>

    <!-- Purchase Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 border-b">
            <h2 class="text-lg font-semibold">تفاصيل عملية تخزين المستلزمات</h2>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right bg-sky-50 font-semibold">المنتج</th>
                        <th class="px-6 py-3 text-right bg-sky-50 font-semibold">عدد المستلزمات</th>
                        <th class="px-6 py-3 text-right bg-sky-50 font-semibold">الكمية</th>
                        <th class="px-6 py-3 text-right bg-sky-50 font-semibold">سعر الوحدة</th>
                        <th class="px-6 py-3 text-right bg-sky-50 font-semibold">السعر الإجمالي</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(detail, index) in purchaseDetails" :key="'detail-'+index">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="text" v-model="detail.StoreItemName" disabled
                                class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="text" v-model="detail.ConfigueQty" disabled
                                class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="text" v-model="detail.Qty" disabled
                                class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="number" v-model="detail.UnitPrice" @@input="updateDetailTotal(detail)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="font-semibold">{{ formatNumber(detail.TotalAmount) }}</span>
                        </td>
                    </tr>
                    <tr class="bg-gray-50 font-semibold">
                        <td class="px-6 py-4"></td>
                        <td class="px-6 py-4"></td>
                        <td class="px-6 py-4 text-right">{{ formatNumber(totalQTY) }}</td>
                        <td class="px-6 py-4 text-right">الاجمالي</td>
                        <td class="px-6 py-4 text-right">{{ formatNumber(totalAmount) }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Storage Summary Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 border-b">
            <h2 class="text-lg font-semibold">ملخص عملية التخزين</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ الفاتورة</label>
                    <input v-model="purchaseInfo.PurchasingDate" type="date"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                    <span v-if="errors.PurchasingDate" class="text-red-500 text-xs">{{ errors.PurchasingDate }}</span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">رقم الفاتورة</label>
                    <input v-model="purchaseInfo.InvoiceNum"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">امر الانتاج</label>
                    <div class="relative">
                        <div class="w-full px-3 py-2 border border-gray-300 rounded-md bg-white cursor-pointer h-[48px] flex items-center justify-between"
                            @@click="toggleSelectDropdown">
                            <span :class="{ 'text-gray-400': !selectedPurchaseOrder }">
                                {{ selectedPurchaseOrder || 'اختر امر الانتاج' }}
                            </span>
                            <i class="fa fa-chevron-down transition-transform"
                                :class="{ 'rotate-180': selectDropdownOpen }"></i>
                        </div>
                        <div v-if="selectDropdownOpen"
                            class="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-md shadow-lg z-10 max-h-60 overflow-y-auto">
                            <input type="text" v-model="searchTerm" placeholder="البحث..." @@click.stop
                                class="w-full px-3 py-2 border-b border-gray-200 focus:outline-none bg-gray-50">
                            <div v-if="filteredPurchaseOrders.length === 0" class="px-3 py-2 text-gray-500 text-center">
                                لا توجد نتائج
                            </div>
                            <div v-else>
                                <div class="px-3 py-2 hover:bg-gray-50 cursor-pointer"
                                    :class="{ 'bg-blue-50': '' === purchaseOrderId }"
                                    @@click="selectPurchaseOrder('', 'اختر امر الانتاج')">
                                    اختر امر الانتاج
                                </div>
                                <div v-for="order in filteredPurchaseOrders" :key="order.Value"
                                    class="px-3 py-2 hover:bg-gray-50 cursor-pointer"
                                    :class="{ 'bg-blue-50': order.Value === purchaseOrderId }"
                                    @@click="selectPurchaseOrder(order.Value, order.Text)">
                                    {{ order.Text }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <span v-if="errors.PurchaseOrderId" class="text-red-500 text-xs">{{ errors.PurchaseOrderId }}</span>
                </div>
                <div class="md:col-span-3">
                    <label class="block text-sm font-medium text-gray-700 mb-1">ملاحظات</label>
                    <textarea v-model="purchaseInfo.Notes" rows="4"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none resize-none"></textarea>
                </div>
            </div>
            <div class="flex justify-end mt-6">
                <button @@click="save"
                    class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-save"></i>
                    حفظ
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="text/javascript">
        // Initialize data from server
        var initialData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                        <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                                <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                    <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                                    <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="p-4">
                                    <ul class="space-y-2">
                                        <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                                    </ul>
                                </div>
                                <div class="p-4 border-t border-gray-200 flex justify-end">
                                    <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-800 text-white rounded-md hover:bg-blue-900">
                                        موافق
                                    </button>
                                </div>
                            </div>
                        </div>
                    `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const { createApp } = Vue;

        createApp({
            components: {
                Messages
            },
            data() {
                return {
                    title: "اذن اضافة خامات للمنتج",
                    storeItem: initialData.StoreItem || {},
                    purchaseInfo: initialData.PurchaseInfo || {},
                    purchaseDetails: initialData.PurchaseDetails || [],
                    purchaseOrderId: initialData.PurchaseOrderId || '',
                    purchaseOrders: @Html.Raw(Json.Serialize(ViewBag.PurchaseOrders)) || [],
                    messages: [],
                    errors: {
                        PurchasingDate: '',
                        PurchaseOrderId: '',
                        Quantity: ''
                    },

                    // Custom Select State
                    selectDropdownOpen: false,
                    searchTerm: '',
                    selectedPurchaseOrder: ''
                };
            },
            computed: {
                totalQTY() {
                    return this.purchaseDetails.reduce((sum, detail) => {
                        return sum + parseFloat(detail.Qty || 0);
                    }, 0);
                },
                totalAmount() {
                    return this.purchaseDetails.reduce((sum, detail) => {
                        return sum + parseFloat(detail.TotalAmount || 0);
                    }, 0);
                },
                filteredPurchaseOrders() {
                    if (!this.searchTerm) {
                        return this.purchaseOrders;
                    }
                    return this.purchaseOrders.filter(order =>
                        order.Text.toLowerCase().includes(this.searchTerm.toLowerCase())
                    );
                }
            },
            methods: {
                // Custom Select Methods
                toggleSelectDropdown() {
                    this.selectDropdownOpen = !this.selectDropdownOpen;
                    if (this.selectDropdownOpen) {
                        this.searchTerm = '';
                    }
                },
                selectPurchaseOrder(value, text) {
                    this.purchaseOrderId = value;
                    this.selectedPurchaseOrder = value ? text : '';
                    this.selectDropdownOpen = false;
                    this.searchTerm = '';

                    if (value) {
                        this.updateNumberOfRack();
                    }
                },

                updateDetailTotal(detail) {
                    const qty = parseFloat(detail.Qty || 0);
                    const unitPrice = parseFloat(detail.UnitPrice || 0);
                    detail.TotalAmount = qty * unitPrice;
                },

                updateTotalRaw() {
                    this.purchaseDetails.forEach(element => {
                        element.Qty = parseFloat(element.ConfigueQty || 0) * parseFloat(this.storeItem.Quantity || 0);
                        this.updateDetailTotal(element);
                    });
                },

                async updateNumberOfRack() {
                    if (!this.purchaseOrderId) return;

                    try {
                        const response = await axios.get(`/Purchases/PurchaseOrder/GetPurchaseOrder/${this.purchaseOrderId}`);

                        const item = response.data.data.filter(obj => obj.StoreItemId == this.storeItem.Id);

                        if (item.length > 0) {
                            const quantity = item[0].StoreItemAmount;
                            this.storeItem.Quantity = quantity;
                            this.updateTotalRaw();
                        } else {
                            this.purchaseOrderId = '';
                            this.selectedPurchaseOrder = '';
                            this.messages.push("العنصر غير موجود في امر الانتاج المحدد");
                        }
                    } catch (error) {
                        console.error("Error occurred:", error);
                        this.purchaseOrderId = '';
                        this.selectedPurchaseOrder = '';
                        this.messages.push("حدث خطأ في جلب بيانات امر الانتاج");
                    }
                },

                validateForm() {
                    this.messages = [];
                    this.errors = {
                        PurchasingDate: '',
                        PurchaseOrderId: '',
                        Quantity: ''
                    };

                    let isValid = true;

                    // Validate PurchaseInfo
                    if (!this.purchaseInfo.PurchasingDate) {
                        this.errors.PurchasingDate = "برجاء تحديد التاريخ";
                        isValid = false;
                    }

                    if (!this.purchaseOrderId) {
                        this.errors.PurchaseOrderId = "برجاء اختيار امر الانتاج";
                        isValid = false;
                    }

                    if (!this.storeItem.Quantity) {
                        this.errors.Quantity = "برجاء اضافة كمية المنتج";
                        isValid = false;
                    } else if (isNaN(parseFloat(this.storeItem.Quantity))) {
                        this.errors.Quantity = "كمية المنتج يجب أن تكون رقماً";
                        isValid = false;
                    } else if (parseFloat(this.storeItem.Quantity) < 0.1) {
                        this.errors.Quantity = "كمية المنتج يجب أن تكون أكبر من 0.1";
                        isValid = false;
                    }

                    // Validate PurchaseDetails array
                    if (this.purchaseDetails.length < 1) {
                        this.messages.push("فاتورة المشتريات يجب ان تحتوى على مادة خام واحدة على الاقل.");
                        isValid = false;
                    }

                    // Validate each purchase detail
                    this.purchaseDetails.forEach((detail, index) => {
                        if (!detail.StoreItemId) {
                            this.messages.push(`برجاء اختيار العنصر في الصف ${index + 1}`);
                            isValid = false;
                        }

                        if (!detail.Qty) {
                            this.messages.push(`برجاء اضافة الكمية في الصف ${index + 1}`);
                            isValid = false;
                        } else if (isNaN(parseFloat(detail.Qty))) {
                            this.messages.push(`الكمية يجب أن تكون رقماً في الصف ${index + 1}`);
                            isValid = false;
                        } else if (parseFloat(detail.Qty) < 0.1) {
                            this.messages.push(`الكمية يجب أن تكون أكبر من 0.1 في الصف ${index + 1}`);
                            isValid = false;
                        }

                        if (!detail.UnitPrice) {
                            this.messages.push(`برجاء اضافة السعر في الصف ${index + 1}`);
                            isValid = false;
                        } else if (isNaN(parseFloat(detail.UnitPrice))) {
                            this.messages.push(`السعر يجب أن يكون رقماً في الصف ${index + 1}`);
                            isValid = false;
                        } else if (parseFloat(detail.UnitPrice) < 0.1) {
                            this.messages.push(`السعر يجب أن يكون أكبر من 0.1 في الصف ${index + 1}`);
                            isValid = false;
                        }
                    });

                    return isValid;
                },

                async save() {
                    if (!this.validateForm()) {
                        return;
                    }

                    // Update total amounts before saving
                    this.purchaseDetails.forEach(detail => {
                        this.updateDetailTotal(detail);
                    });

                    // Update purchase info total
                    this.purchaseInfo.TotalAmount = this.totalAmount;

                    const purchaseData = {
                        StoreItem: this.storeItem,
                        PurchaseInfo: this.purchaseInfo,
                        PurchaseDetails: this.purchaseDetails,
                        PurchaseOrderId: this.purchaseOrderId
                    };

                    try {
                        const response = await axios.post('/Purchases/Home/SavePurchaseForProduct', purchaseData);

                        if (response.data && (response.data.success || response.data.newLocation)) {
                            if (response.data.newLocation) {
                                window.location.href = response.data.newLocation;
                            } else {
                                window.location.href = '/Purchases/Home/Index';
                            }
                        } else {
                            this.messages = [response.data.errors && response.data.errors.length > 0 ? response.data.errors[0] : 'حدث خطأ أثناء الحفظ'];
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        this.messages = ['حدث خطأ في الاتصال بالخادم'];
                    }
                },

                formatNumber(value) {
                    if (!value) return '0';
                    return parseFloat(value).toLocaleString('ar-EG', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                },

                setInitialSelectedText() {
                    if (this.purchaseOrderId) {
                        const selectedOrder = this.purchaseOrders.find(order => order.Value === this.purchaseOrderId);
                        if (selectedOrder) {
                            this.selectedPurchaseOrder = selectedOrder.Text;
                        }
                    }
                },

                clearMessages() {
                    this.messages = [];
                }
            },
            mounted() {
                this.setInitialSelectedText();

                // Close dropdown when clicking outside
                document.addEventListener('click', (event) => {
                    if (!event.target.closest('.relative')) {
                        this.selectDropdownOpen = false;
                    }
                });
            }
        }).mount('#app');
    </script>
}