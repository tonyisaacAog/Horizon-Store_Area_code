@model ItemCardContainer
@{
    var title = "كارت صنف للمنتج";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" class="stroke-[#212b36]" viewBox="0 0 24 24"
                fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 3h18v18H3zM9 9h6v6H9z" />
                <path d="M9 3v6M15 3v6M3 9h18M3 15h18" />
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <a href="javascript:history.back()"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </a>
    </div>

    <!-- Product Information Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">{{ title }}</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المنتج</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ storeItem.ProductName }}
                    </span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المنتج عربى</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ storeItem.ProductNameAr }}
                    </span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">كود المنتج</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ storeItem.ItemCode }}
                    </span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">نوع المنتج</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ storeItem.FamilyName }}
                    </span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">ماركة المنتج</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ storeItem.StoreBrandName }}
                    </span>
                </div>
            </div>

            <!-- Quantity Summary -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div class="text-center">
                    <label class="block text-sm font-medium text-gray-700 mb-2">كمية المنتج</label>
                    <div
                        class="bg-blue-50 border border-blue-200 text-blue-800 px-4 py-3 rounded-md text-lg font-semibold">
                        {{ storeItem.CurrentQty }}
                    </div>
                </div>
                <div class="text-center">
                    <label class="block text-sm font-medium text-gray-700 mb-2">كمية التالف</label>
                    <div
                        class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-md text-lg font-semibold">
                        {{ storeItem.DestroyedQty }}
                    </div>
                </div>
                <div class="text-center">
                    <label class="block text-sm font-medium text-gray-700 mb-2">اجمالى المنتج</label>
                    <div
                        class="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-md text-lg font-semibold">
                        {{ qtyAfter }}
                    </div>
                </div>
            </div>

            <!-- Store Locations Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 border border-gray-300">
                    <thead class="bg-gray-50">
                        <tr>
                            <th
                                class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                اسم المخزن
                            </th>
                            <th
                                class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                الكمية
                            </th>
                            <th
                                class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                التالف
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <tr v-for="(balance, index) in storeLocationBalances" :key="'balance-'+index"
                            class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                {{ balance.LocationName }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                {{ balance.QTY }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                {{ balance.DestroyedQty }}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Transaction Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">تفاصيل التحركات</h2>
        </div>
        <div class="p-6">
            <!-- Date Range Filter -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">من</label>
                    <input v-model="transactionContainer.Search.StartDate" type="date"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">الى</label>
                    <input v-model="transactionContainer.Search.EndDate" type="date"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div class="flex items-end">
                    <button @@click="loadReport"
                        class="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-md flex items-center justify-center gap-2 transition-colors h-[48px]">
                        <i class="fas fa-search"></i>
                        عرض التقرير
                    </button>
                </div>
            </div>

            <!-- Balance Summary -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">رصيد أول المدة</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ transactionContainer.Search.StartBalance }}
                    </span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">رصيد أخر المدة</label>
                    <span class="block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md">
                        {{ transactionContainer.Search.EndBalance }}
                    </span>
                </div>
            </div>

            <!-- Transaction Details Table -->
            <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="text-gray-900 px-6 py-3 flex items-center">
                    <h3 class="text-lg font-semibold">تفاصيل الحركات</h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200 border border-gray-300">
                        <thead class="bg-gray-50">
                            <tr>
                                <th
                                    class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                    التاريخ
                                </th>
                                <th
                                    class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                    الكمية
                                </th>
                                <th
                                    class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                    الكمية بعد
                                </th>
                                <th
                                    class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                    نوع العملية
                                </th>
                                <th
                                    class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                                    العميل / المورد
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <tr v-for="(transaction, index) in transactionContainer.TransactionDetails"
                                :key="'transaction-'+index" class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                    {{ formatDate(transaction.TransDate) }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                    {{ transaction.QTY }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                    {{ transaction.QtyAfter }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                    <a v-if="transaction.TransType === 60"
                                        :href="'/Manufacturing/Home/DetailsManufacturing/' + transaction.ReferanceId"
                                        target="_blank"
                                        class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-xs transition-colors">
                                        {{ transaction.TransTypeName }}
                                    </a>
                                    <a v-else-if="transaction.TransType === 20"
                                        :href="'/Sales/Home/DetailsSales/' + transaction.ReferanceId" target="_blank"
                                        class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-xs transition-colors">
                                        {{ transaction.TransTypeName }}
                                    </a>
                                    <span v-else class="text-gray-600">{{ transaction.TransTypeName }}</span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-b">
                                    {{ transaction.SupplierOrClientName }}
                                </td>
                            </tr>
                            <tr v-if="transactionContainer.TransactionDetails.length === 0">
                                <td colspan="5" class="text-center text-lg text-gray-500 py-8">
                                    لا توجد حركات للعرض
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="text/javascript">
        // Initialize data from server
        var initialData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                                            <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                                                <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                                                    <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                                        <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                                                        <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                            </svg>
                                                        </button>
                                                    </div>
                                                    <div class="p-4">
                                                        <ul class="space-y-2">
                                                            <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                                                        </ul>
                                                    </div>
                                                    <div class="p-4 border-t border-gray-200 flex justify-end">
                                                        <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                                                            موافق
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const { createApp } = Vue;

        createApp({
            components: {
                Messages
            },
            data() {
                return {
                    title: "كارت صنف للمنتج",
                    storeItem: initialData.StoreItem || {},
                    storeLocationBalances: initialData.StoreLocationBalances || [],
                    transactionContainer: {
                        Search: {
                            StartDate: initialData.TransactionContainer?.Search?.StartDate || '',
                            EndDate: initialData.TransactionContainer?.Search?.EndDate || '',
                            StartBalance: initialData.TransactionContainer?.Search?.StartBalance || 0,
                            EndBalance: initialData.TransactionContainer?.Search?.EndBalance || 0,
                            StoreItemId: initialData.StoreItem?.Id || 0
                        },
                        TransactionDetails: initialData.TransactionContainer?.TransactionDetails || []
                    },
                    messages: []
                };
            },
            computed: {
                qtyAfter() {
                    return (this.storeItem.CurrentQty || 0) - (this.storeItem.DestroyedQty || 0);
                }
            },
            methods: {
                loadReport() {
                    this.messages = [];

                    // Basic validation
                    if (!this.transactionContainer.Search.StartDate) {
                        this.messages.push('برجاء اختيار تاريخ البداية');
                    }
                    if (!this.transactionContainer.Search.EndDate) {
                        this.messages.push('برجاء اختيار تاريخ النهاية');
                    }

                    if (this.messages.length > 0) {
                        return;
                    }

                    // Set StoreItemId
                    this.transactionContainer.Search.StoreItemId = this.storeItem.Id;

                    // Clear existing transaction details
                    this.transactionContainer.TransactionDetails = [];

                    // Make API call
                    axios.post('/Store/Reports/LoadReport', this.transactionContainer)
                        .then(response => {
                            if (response.data && response.data.Result) {
                                const result = response.data.Result;
                                this.transactionContainer.Search.StartBalance = result.Search.StartBalance;
                                this.transactionContainer.Search.EndBalance = result.Search.EndBalance;
                                this.transactionContainer.TransactionDetails = result.TransactionDetails || [];
                            } else if (response.data && response.data.errors) {
                                this.messages = response.data.errors;
                            } else {
                                this.messages.push('حدث خطأ أثناء تحميل التقرير');
                            }
                        })
                        .catch(error => {
                            this.messages.push('حدث خطأ في الاتصال بالخادم');
                            console.error('Error loading report:', error);
                        });
                },
                formatDate(dateString) {
                    if (!dateString) return '';
                    const date = new Date(dateString);
                    return date.toLocaleDateString('ar-EG');
                },
                clearMessages() {
                    this.messages = [];
                }
            },
            mounted() {
                // Initialize balances if needed
                this.transactionContainer.Search.StartBalance = 0;
                this.transactionContainer.Search.EndBalance = 0;
            }
        }).mount('#app');
    </script>
}