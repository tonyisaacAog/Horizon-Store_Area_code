@model AmountNotCollectReportContainer
@{
    var title = "ارصدة المنتجات الغير مجمعة";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model.Items);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Page Header -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#000000" stroke-width="2" class="stroke-[#212b36]" stroke-linecap="round"
                stroke-linejoin="round">
                <path d="M3 3v18h18" />
                <path d="M18 17V9" />
                <path d="M13 17V5" />
                <path d="M8 17v-3" />
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
    </div>

    <!-- Error Alert -->
    @if (!string.IsNullOrEmpty(ViewBag.Errors))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            <strong class="font-bold">خطأ!</strong>
            <span class="block sm:inline">@ViewBag.Errors</span>
        </div>
        ViewBag.Errors = string.Empty;
    }

    <!-- Search Form Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 border-b px-6 py-4 flex items-center gap-2">
            <i class="fas fa-search"></i>
            <h2 class="text-lg font-semibold">البحث والتصفية</h2>
        </div>
        <div class="p-6">
            <form asp-controller="Reports" asp-action="GetAmountBalanceStoreItemNotCollectFromPurchase" method="post" class="space-y-4">
                <div class="grid grid-cols-1 gap-4">
                    <div>
                        @Html.Editor("StoreItemId","StoreItemsList",new
                        {
                            htmlAttributes = new
                            {
                                @name = "StoreItemId",
                                @id = "StoreItemId",
                                @class = "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            }
                        })
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ البداية</label>
                            <input type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   value="@Model.Search.StartDate" name="StartDate" id="StartDate" required />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">تاريخ النهاية</label>
                            <input type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   value="@Model.Search.EndDate" name="EndDate" id="EndDate" required />
                        </div>
                    </div>
                    <div class="text-center mt-4">
                        <button type="submit"
                            class="bg-emerald-800 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg w-full md:w-1/4 mx-auto transition-colors">
                            بحث
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Card -->
    <div v-if="items.length > 0" class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <data-table :columns="columns" :data="items" :searchable="true" :sortable="true" :paginated="true"
            :per-page-options="[10, 25, 50, 100]" :default-per-page="25" search-placeholder="البحث في أرصدة المنتجات الغير مجمعة..."
            no-data-message="لا توجد بيانات متاحة" @@row-action="handleRowAction" @@row-click="handleRowClick"
            @@search-change="handleSearchChange" @@sort-change="handleSortChange" @@page-change="handlePageChange"
            ref="nonAssembledTable">

            <!-- Summary Slot -->
            <template #summary>
                <div class="bg-gray-50 px-4 py-3 flex justify-between items-center border-t border-gray-200">
                    <div class="text-sm text-gray-600">
                        إجمالي العناصر: <span class="font-medium">{{ totalItems }}</span>
                    </div>
                    <div class="text-sm text-gray-600">
                        النتائج المعروضة: <span class="font-medium">{{ searchResults }}</span>
                    </div>
                    <div class="text-sm text-gray-600">
                        إجمالي قيمة الصاج: <span class="font-medium">{{ formatCurrency(totalRawPrice) }}</span>
                    </div>
                </div>
            </template>
        </data-table>
    </div>

    <!-- No Data Message -->
    <div v-else class="bg-white rounded-lg shadow-md p-8 text-center">
        <div class="text-gray-500 text-lg mb-4">
            <i class="fas fa-inbox fa-3x mb-4"></i>
            <p>لا توجد بيانات متاحة</p>
            <p class="text-sm">استخدم النموذج أعلاه للبحث عن البيانات</p>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.3.4/vue.global.min.js"></script>
    <!-- Import the DataTable component -->
    <script type="module">
        import { DataTable } from '/assets/components/DataTable.js?v=2.6';

        const { createApp } = Vue;

        createApp({
            components: {
                DataTable
            },
            data() {
                return {
                    title: 'ارصدة المنتجات الغير مجمعة',
                    items: @Html.Raw(data),
                    totalItems: 0,
                    searchResults: 0,
                    currentPage: 1,
                    columns: [
                        {
                            key: 'StoreItemName',
                            label: 'المنتج',
                            sortable: true,
                            searchable: true,
                            width: 'w-2/5'
                        },
                        {
                            key: 'StoreItemMainQuantity',
                            label: 'الكمية المتبقية',
                            sortable: true,
                            align: 'right',
                            width: 'w-1/5',
                            format: (value) => {
                                if (value === null || value === undefined || value === '') return '0';
                                const num = parseFloat(value);
                                return num.toLocaleString('ar-EG');
                            }
                        },
                        {
                            key: 'PriceItemsRawPurchase',
                            label: 'سعر الصاج',
                            sortable: true,
                            align: 'right',
                            width: 'w-2/5',
                            format: (value) => {
                                if (value === null || value === undefined || value === '') return '0.00';
                                const num = parseFloat(value);
                                return num.toLocaleString('ar-EG', { 
                                    minimumFractionDigits: 2, 
                                    maximumFractionDigits: 2 
                                }) + ' جنيه';
                            }
                        }
                    ]
                }
            },
            computed: {
                totalRawPrice() {
                    return this.items.reduce((total, item) => {
                        const price = parseFloat(item.PriceItemsRawPurchase) || 0;
                        return total + price;
                    }, 0);
                }
            },
            mounted() {
                this.totalItems = this.items.length;
                this.searchResults = this.items.length;

                // Set document title
                document.title = this.title;

                // Initialize Select2 if needed
                this.$nextTick(() => {
                    if (typeof $ !== 'undefined' && $.fn.select2) {
                        $("#StoreItemId").select2();
                    }
                });
            },
            methods: {
                handleRowAction(event) {
                    const { action, item } = event;

                    switch (action) {
                        case 'details':
                            this.showItemDetails(item);
                            break;
                        case 'history':
                            this.showItemHistory(item);
                            break;
                    }
                },

                showItemDetails(item) {
                    // Implement your detail view logic here
                    console.log('Showing details for:', item);
                    // Example: window.location.href = `/Inventory/Details/${item.Id}`;
                },

                showItemHistory(item) {
                    // Implement history view logic here
                    console.log('Showing history for:', item);
                    // Example: window.location.href = `/Inventory/History/${item.Id}`;
                },

                handleRowClick(item) {
                    console.log('Row clicked:', item);
                    // You can implement row click behavior here
                },

                handleSearchChange(event) {
                    this.searchResults = event.results;
                },

                handleSortChange(event) {
                    console.log('Sort changed:', event);
                },

                handlePageChange(event) {
                    this.currentPage = event.page;
                },

                formatCurrency(value) {
                    if (value === null || value === undefined || value === '') return '0.00 جنيه';
                    const num = parseFloat(value);
                    return num.toLocaleString('ar-EG', { 
                        minimumFractionDigits: 2, 
                        maximumFractionDigits: 2 
                    }) + ' جنيه';
                }
            }
        }).mount('#app');
    </script>
}