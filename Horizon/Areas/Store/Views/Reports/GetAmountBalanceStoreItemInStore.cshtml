@model List<StoreItemAmountInStoreReportsVM>
@{
    var title = "جرد المخازن للمنتجات";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Card Header -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#000000" stroke-width="2" class="stroke-[#212b36]" stroke-linecap="round"
                stroke-linejoin="round">
                <path d="M3 21v-13l9 -4l9 4v13" />
                <path d="M13 13h4v8h-10v-6h6" />
                <path d="M13 21v-9a1 1 0 0 0 -1 -1h-2a1 1 0 0 0 -1 1v3" />
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
    </div>

    <!-- Card Body -->
    <data-table :columns="columns" :data="items" :searchable="true" :sortable="true" :paginated="true"
        :per-page-options="[5, 10, 25, 50]" :default-per-page="10" search-placeholder="البحث في جرد المخازن..."
        no-data-message="لا توجد بيانات" @@row-action="handleRowAction" @@row-click="handleRowClick"
        @@search-change="handleSearchChange" @@sort-change="handleSortChange" @@page-change="handlePageChange"
        ref="inventoryTable">
    </data-table>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.3.4/vue.global.min.js"></script>
    <!-- Import the separated component -->
    <script type="module">
        import { DataTable } from '/assets/components/DataTable.js?v=2.6';

        const { createApp } = Vue;

        createApp({
            components: {
                DataTable
            },
            data() {
                return {
                    title: 'جرد المخازن للمنتجات',
                    items: @Html.Raw(data),
                    totalItems: 0,
                    searchResults: 0,
                    currentPage: 1,
                    columns: [
                        {
                            key: 'StoreName',
                            label: 'المخزن',
                            sortable: true,
                            searchable: true
                        },
                        {
                            key: 'StoreItemName',
                            label: 'المنتج',
                            sortable: true,
                            searchable: true
                        },
                        {
                            key: 'QTY',
                            label: 'الكمية',
                            sortable: true,
                            format: (value) => {
                                if (value === null || value === undefined || value === '') return '0';
                                return parseFloat(value).toLocaleString('ar-EG');
                            }
                        },
                        {
                            key: 'DestroyedQty',
                            label: 'التالف',
                            sortable: true,
                            format: (value) => {
                                if (value === null || value === undefined || value === '') return '0';
                                return parseFloat(value).toLocaleString('ar-EG');
                            }
                        }
                    ]
                }
            },
            mounted() {
                this.totalItems = this.items.length;
                this.searchResults = this.items.length;
            },
            methods: {
                handleRowAction(event) {
                    const { action, item } = event;

                    switch (action) {
                        case 'details':
                            // Add your detail view logic here
                            console.log('View details for item:', item);
                            break;
                    }
                },

                handleRowClick(item) {
                    console.log('Row clicked:', item);
                },

                handleSearchChange(event) {
                    this.searchResults = event.results;
                },

                handleSortChange(event) {
                    console.log('Sort changed:', event);
                },

                handlePageChange(event) {
                    this.currentPage = event.page;
                }
            }
        }).mount('#app');
    </script>
}