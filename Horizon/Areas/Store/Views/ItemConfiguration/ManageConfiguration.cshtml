@model ConfigurationContainer
@{
    var title = "مستلزمات المنتج للتجميع";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container--default .select2-selection--single {
        height: 48px !important;
        padding: 6px 12px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        background-color: #fff;
        font-size: 1rem;
        line-height: 1.5;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 36px;
        color: #374151;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 100%;
        right: 6px;
    }

    .select2-container {
        width: 100% !important;
    }

    .select2-dropdown {
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }
</style>

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#212b36" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"></path>
                <path d="M13 3H11a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2z"></path>
                <path d="M9 12h6"></path>
                <path d="M9 16h6"></path>
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <button onclick="window.history.back()"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </button>
    </div>

    <!-- Product Information Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات المنتج</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div v-for="(value, label) in productInfo" :key="label">
                    <label class="block text-sm font-medium text-gray-700 mb-1">{{ label }}</label>
                    <input type="text" :value="value" readonly
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500 h-[48px]">
                </div>
            </div>
            <div class="mt-6">
                <label class="block text-sm font-medium text-gray-700 mb-1">الكمية الأكبر التي يمكن إنتاجها من
                    المنتج</label>
                <input type="text" :value="NumberProductCanMade" readonly
                    class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500 h-[48px] text-center">
            </div>
        </div>
    </div>

    <!-- Materials Configuration Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center justify-between border-b">
            <div class="flex items-center">
                <h2 class="text-lg font-semibold">تفاصيل المواد المستخدمة لتجميع المنتج</h2>
            </div>
            <button @@click="addItem"
                class="bg-sky-900 hover:bg-sky-700 text-white px-3 py-1 rounded flex items-center">
                <i class="fas fa-plus ml-2"></i> إضافة
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="text-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-right">المادة الخام</th>
                        <th class="px-6 py-3 text-right">الكمية</th>
                        <th class="px-6 py-3 text-right">إجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(item, index) in ItemConfigurationVMs" :key="index" v-show="item.RecordStatus !== 2"
                        :class="{ 'bg-red-50': item.hasError }">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span v-if="item.Id !== 0" class="text-gray-900">{{ item.StoreItemsRawName }}</span>
                            <select v-else
                                class="raw-select w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]"
                                :data-index="index"></select>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input type="number" v-model="item.MinimumAmount" @@input="updateItem(item)"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none h-[48px]">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button @@click="removeItem(item)" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-minus"></i>
                            </button>
                        </td>
                    </tr>
                    <tr v-if="visibleItems.length === 0">
                        <td colspan="3" class="text-center text-lg text-gray-500 py-6">لا توجد عناصر للعرض</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-end gap-4 mb-6">
        <button @@click="save"
            class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
            <i class="fas fa-save"></i>
            حفظ
        </button>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.full.min.js"></script>

    <script>
        const rawData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                            <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                                <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                                    <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                        <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                                        <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>
                                    <div class="p-4">
                                        <ul class="space-y-2">
                                            <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                                        </ul>
                                    </div>
                                    <div class="p-4 border-t border-gray-200 flex justify-end">
                                        <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-800 text-white rounded-md hover:bg-blue-900">
                                            موافق
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const app = Vue.createApp({
            components: {
                Messages
            },
            data() {
                return {
                    title: "مستلزمات المنتج للتجميع",
                    messages: [],
                    StoreItemVM: rawData.StoreItemVM,
                    NumberProductCanMade: rawData.NumberProductCanMade,
                    ItemConfigurationVMs: rawData.ItemConfigurationVMs.map(item => ({
                        ...item,
                        StoreItemsRawName: item.StoreItemsRawName || '',
                        MinimumAmount: item.MinimumAmount || 0,
                        RecordStatus: item.RecordStatus || 0,
                        hasError: false
                    }))
                };
            },

            computed: {
                productInfo() {
                    return {
                        'اسم المنتج': this.StoreItemVM.ProductName,
                        'نوع المنتج': this.StoreItemVM.FamilyName,
                        'كود المنتج': this.StoreItemVM.ItemCode,
                        'ماركة المنتج': this.StoreItemVM.StoreBrandName
                    };
                },
                visibleItems() {
                    return this.ItemConfigurationVMs.filter(item => item.RecordStatus !== 2);
                }
            },

            methods: {
                addItem() {
                    const lastItem = this.ItemConfigurationVMs[this.ItemConfigurationVMs.length - 1];

                    if (lastItem && (
                        !lastItem.StoreItemRawId || lastItem.StoreItemRawId === 0 ||
                        !lastItem.MinimumAmount || lastItem.MinimumAmount <= 0
                    )) {
                        this.messages.push("يرجى اختيار المادة الخام وإدخال كمية صحيحة قبل إضافة صف جديد.");
                        return;
                    }

                    const newItem = {
                        Id: 0,
                        StoreItemId: this.StoreItemVM.Id,
                        StoreItemRawId: null,
                        StoreItemsRawName: '',
                        MinimumAmount: 0,
                        RecordStatus: 0,
                        hasError: false
                    };

                    this.ItemConfigurationVMs.push(newItem);
                    this.$nextTick(() => this.initSelect2(this.ItemConfigurationVMs.length - 1));
                },

                removeItem(item) {
                    item.RecordStatus = 2;
                    item.hasError = false;
                },

                updateItem(item) {
                    if (item.RecordStatus !== 0) {
                        item.RecordStatus = 1;
                    }
                    item.hasError = false;
                },

                initSelect2(index) {
                    const self = this;
                    const $select = $(`select.raw-select[data-index="${index}"]`);

                    $select.select2({
                        placeholder: "اختر المادة الخام",
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '/Store/StoreItemRaw/SearchRawItems',
                            dataType: 'json',
                            delay: 300,
                            cache: true,
                            data: params => ({
                                term: params.term || '',
                                page: params.page || 1,
                                pageSize: 10
                            }),
                            processResults: (data) => {
                                return {
                                    results: data.items.map(x => ({
                                        id: x.Id,
                                        text: x.ItemName
                                    }))
                                };
                            }
                        }
                    }).on('select2:select', function (e) {
                        const selected = e.params.data;
                        const selectedId = selected.id;

                        // Check for duplicates
                        const isDuplicate = self.ItemConfigurationVMs.some((item, i) =>
                            i !== index && item.StoreItemRawId === selectedId && item.RecordStatus !== 2
                        );

                        if (isDuplicate) {
                            self.messages.push("هذه المادة الخام تم اختيارها مسبقًا.");
                            $(this).val(null).trigger('change');
                            return;
                        }

                        // Check if item was previously deleted, restore it
                        const existingDeletedIndex = self.ItemConfigurationVMs.findIndex(item =>
                            item.StoreItemRawId === selectedId && item.RecordStatus === 2
                        );

                        if (existingDeletedIndex !== -1) {
                            const restoredItem = self.ItemConfigurationVMs[existingDeletedIndex];
                            restoredItem.RecordStatus = 1;
                            restoredItem.hasError = false;
                            $(this).val(null).trigger('change');
                            self.messages.push("تم استعادة المادة الخام المحذوفة من قبل.");
                            return;
                        }

                        // Assign selected values
                        const item = self.ItemConfigurationVMs[index];
                        item.StoreItemRawId = selected.id;
                        item.StoreItemsRawName = selected.text;
                        item.RecordStatus = item.Id === 0 ? 0 : 1;
                        item.hasError = false;
                        self.updateItem(item);
                    });
                },

                clearMessages() {
                    this.messages = [];
                },

                save() {
                    this.messages = [];

                    // Clear all error states
                    this.ItemConfigurationVMs.forEach(item => item.hasError = false);

                    // Find first invalid item
                    const invalidIndex = this.ItemConfigurationVMs.findIndex(item =>
                        item.RecordStatus !== 2 && (
                            !item.StoreItemRawId || item.StoreItemRawId === 0 ||
                            !item.MinimumAmount || item.MinimumAmount <= 0
                        )
                    );

                    if (invalidIndex !== -1) {
                        this.messages.push(`السطر رقم ${invalidIndex + 1} غير مكتمل. يرجى اختيار المادة الخام وإدخال كمية صحيحة.`);
                        this.ItemConfigurationVMs[invalidIndex].hasError = true;
                        return;
                    }

                    // Check if there are any valid items
                    const hasValidItems = this.ItemConfigurationVMs.some(item =>
                        item.RecordStatus !== 2 &&
                        item.StoreItemRawId > 0 &&
                        item.MinimumAmount > 0
                    );

                    if (!hasValidItems) {
                        this.messages.push("يجب إدخال مادة خام واحدة على الأقل بكمية صحيحة.");
                        return;
                    }

                    // Filter valid items for saving
                    const itemsToSend = this.ItemConfigurationVMs.filter(item =>
                        item.RecordStatus !== 2 &&
                        item.StoreItemRawId &&
                        item.MinimumAmount > 0
                    );

                    const payload = {
                        StoreItemVM: this.StoreItemVM,
                        ItemConfigurationVMs: itemsToSend
                    };

                    axios.post('/Store/ItemConfiguration/SaveConfiguration', payload)
                        .then(response => {
                            if (response.data.success) {
                                window.location.href = '/Orders/Order/Index';
                            } else if (response.data.newLocation) {
                                window.location.href = response.data.newLocation;
                            } else {
                                this.messages = response.data.errors || ['حدث خطأ أثناء الحفظ'];
                            }
                        })
                        .catch(err => {
                            this.messages.push('حدث خطأ أثناء الحفظ');
                            console.error(err);
                        });
                }
            },

            mounted() {
                this.ItemConfigurationVMs.forEach((item, index) => {
                    if (item.Id === 0) {
                        this.$nextTick(() => {
                            this.initSelect2(index);
                        });
                    }
                });
            }
        });

        app.mount('#app');
    </script>
}