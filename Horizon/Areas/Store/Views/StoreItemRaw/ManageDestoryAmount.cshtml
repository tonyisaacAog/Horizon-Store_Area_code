@model StoreItemRawDestroyVM
@{
    var title = "تحديد كمية التالف من مستلزمات الانتاج";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Messages Component -->
    <messages :messages="messages" @@clear-messages="clearMessages"></messages>

    <!-- Page Title -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" class="stroke-[#212b36]" viewBox="0 0 24 24"
                fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
        <a href="@((Context.Request.Headers["Referer"].ToString() != string.Empty) ? Context.Request.Headers["Referer"].ToString() : Url.Action("Index", "StoreItemRaw", new { area = "Store" }))"
            class="bg-[#212b36] hover:bg-[#222] text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 transition-colors">
            رجوع
            <i class="fa fa-arrow-left"></i>
        </a>
    </div>

    <!-- Raw Material Information Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">بيانات المادة الخام</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المادة</label>
                    <input v-model="storeItemRaw.ItemName" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">اسم المادة عربى</label>
                    <input v-model="storeItemRaw.ItemNameAr" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">نوع المادة</label>
                    <input v-model="storeItemRaw.RawItemTypeName" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">الكمية الكلية الحالية للمادة</label>
                    <input v-model="storeItemRaw.QTY" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">الكمية التالفة للمادة فى السابق</label>
                    <input v-model="storeItemRaw.DestroyedQty" disabled
                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
                </div>
            </div>
        </div>
    </div>

    <!-- Destroy Details Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="text-gray-900 px-6 py-4 flex items-center border-b">
            <h2 class="text-lg font-semibold">تفاصيل التالف</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">كمية التالف</label>
                    <input v-model="destroyQty" type="number" step="0.1" min="0"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span v-if="errors.destroyQty" class="text-red-500 text-xs">{{ errors.destroyQty }}</span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">التاريخ</label>
                    <input v-model="dateOfDestroy" type="date"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span v-if="errors.dateOfDestroy" class="text-red-500 text-xs">{{ errors.dateOfDestroy }}</span>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">المشتريات</label>
                    @Html.Editor("Id","PurchasingList", new
                    {
                        htmlAttributes = new
                        {
                            @v_model = "purchasingId",
                            @class = "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 h-[48px]",
                            @id = "purchasingSelect"
                        }
                    })
                    <span v-if="errors.purchasingId" class="text-red-500 text-xs">{{ errors.purchasingId }}</span>
                </div>
            </div>
            <div class="mt-6">
                <label class="block text-sm font-medium text-gray-700 mb-1">ملاحظات</label>
                <textarea v-model="description" rows="3"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"></textarea>
            </div>
            <div class="flex justify-end mt-6">
                <button @@click="save"
                    class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <i class="fas fa-save"></i>
                    حفظ
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="text/javascript">
        // Initialize data from server
        var initialData = @Html.Raw(data);

        // Messages Component
        const Messages = {
            template: `
                <div v-if="messages.length > 0" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                            <h3 class="text-lg font-medium text-gray-900">رسائل</h3>
                            <button @@click="$emit('clear-messages')" class="text-gray-500 hover:text-gray-700">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                        <div class="p-4">
                            <ul class="space-y-2">
                                <li v-for="(message, index) in messages" :key="index" class="text-red-600 text-sm">{{ message }}</li>
                            </ul>
                        </div>
                        <div class="p-4 border-t border-gray-200 flex justify-end">
                            <button @@click="$emit('clear-messages')" class="px-4 py-2 bg-blue-800 text-white rounded-md hover:bg-blue-900">
                                موافق
                            </button>
                        </div>
                    </div>
                </div>
            `,
            props: ['messages'],
            emits: ['clear-messages']
        };

        const { createApp } = Vue;

        createApp({
            components: {
                Messages
            },
            data() {
                return {
                    title: 'تحديد كمية التالف من مستلزمات الانتاج',
                    storeItemRaw: initialData.StoreItemRaw || {},
                    destroyQty: initialData.DestroyQty || '',
                    dateOfDestroy: initialData.DateOfDestroy || '',
                    purchasingId: initialData.PurchasingId || '',
                    description: initialData.Description || '',
                    messages: [],
                    errors: {
                        destroyQty: '',
                        dateOfDestroy: '',
                        purchasingId: ''
                    }
                };
            },
            methods: {
                validateForm() {
                    this.errors = {
                        destroyQty: '',
                        dateOfDestroy: '',
                        purchasingId: ''
                    };
                    this.messages = [];

                    let isValid = true;

                    // Validate destroyed quantity
                    if (!this.destroyQty || this.destroyQty === '') {
                        this.errors.destroyQty = 'برجاء إدخال كمية التالف';
                        isValid = false;
                    } else if (isNaN(parseFloat(this.destroyQty))) {
                        this.errors.destroyQty = 'كمية التالف يجب أن تكون رقماً';
                        isValid = false;
                    } else if (parseFloat(this.destroyQty) < 0.1) {
                        this.errors.destroyQty = 'كمية التالف يجب أن تكون أكبر من 0.1';
                        isValid = false;
                    } else {
                        // Validate that destroyed quantity doesn't exceed current quantity
                        const currentQty = parseFloat(this.storeItemRaw.QTY || 0);
                        const destroyAmount = parseFloat(this.destroyQty || 0);
                        if (destroyAmount > currentQty) {
                            this.errors.destroyQty = 'كمية التالف لا يمكن أن تكون أكبر من الكمية الحالية للمادة';
                            isValid = false;
                        }
                    }

                    // Validate date
                    if (!this.dateOfDestroy || this.dateOfDestroy === '') {
                        this.errors.dateOfDestroy = 'برجاء تحديد تاريخ التالف';
                        isValid = false;
                    }

                    // Validate purchasing selection
                    if (!this.purchasingId || this.purchasingId === '') {
                        this.errors.purchasingId = 'برجاء اختيار المشتريات';
                        isValid = false;
                    }

                    return isValid;
                },

                save() {
                    if (!this.validateForm()) {
                        return;
                    }

                    const destroyData = {
                        StoreItemRaw: this.storeItemRaw,
                        DestroyQty: this.destroyQty,
                        DateOfDestroy: this.dateOfDestroy,
                        PurchasingId: this.purchasingId,
                        Description: this.description
                    };

                    axios.post('/Store/StoreItemRaw/SaveDestoryAmount', destroyData)
                        .then(response => {
                            if (response.data.success) {
                                window.location.href = '/Store/StoreItemRaw';
                            } else if (response.data.newLocation) {
                                window.location.href = response.data.newLocation;
                            } else {
                                this.messages = response.data.errors || ['حدث خطأ أثناء الحفظ'];
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            this.messages = ['حدث خطأ في الاتصال بالخادم'];
                        });
                },

                clearMessages() {
                    this.messages = [];
                }
            }
        }).mount('#app');
    </script>
}