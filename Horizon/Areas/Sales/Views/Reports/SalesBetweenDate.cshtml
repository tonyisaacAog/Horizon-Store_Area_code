@model SaleReport
@{
    var title = "تقرير اذون الصرف";
    ViewData["Title"] = title;
    string data = JsonConvert.SerializeObject(Model);
}

<div id="app" class="container mx-auto px-4 py-6">
    <!-- Page Header -->
    <div class="flex justify-between items-center mb-8 mt-4">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                stroke="#000000" stroke-width="2" class="stroke-[#212b36]" stroke-linecap="round"
                stroke-linejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <h1 class="text-2xl text-[#212b36] font-bold">{{ title }}</h1>
        </div>
    </div>

    <!-- Search Form Card -->
    <div class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="bg-primary text-white px-6 py-4 flex items-center gap-2">
            <h2 class="text-lg font-semibold">{{ title }}</h2>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                <div class="flex items-center gap-2">
                    <label class="w-1/4 text-sm font-medium text-gray-700">من</label>
                    <input type="date" v-model="searchDate.startDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div class="flex items-center gap-2">
                    <label class="w-1/4 text-sm font-medium text-gray-700">الى</label>
                    <input type="date" v-model="searchDate.endDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div>
                    <button @@click="loadReport"
                        class="w-full bg-emerald-800 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg transition-colors h-[48px]">
                        عرض التقرير
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Card -->
    <div v-if="saleVMs.length > 0" class="bg-white rounded-lg shadow-md mb-6 overflow-hidden">
        <div class="bg-primary text-white px-6 py-4 flex items-center gap-2">
            <h2 class="text-lg font-semibold">{{ title }}</h2>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-right">اسم العميل</th>
                        <th class="px-6 py-3 text-right">التاريخ</th>
                        <th class="px-6 py-3 text-right">الكمية</th>
                        <th class="px-6 py-3 text-right">رقم الفاتورة</th>
                        <th class="px-6 py-3 text-right">الإجراءات</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <tr v-for="(sale, index) in saleVMs" :key="index">
                        <td class="px-6 py-4">{{ sale.ClientName }}</td>
                        <td class="px-6 py-4 whitespace-nowrap">{{ sale.SalesDate }}</td>
                        <td class="px-6 py-4 whitespace-nowrap">{{ formatNumber(sale.TotalAmount) }}</td>
                        <td class="px-6 py-4 whitespace-nowrap">{{ sale.InvoiceNum }}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <a :href="'/Sales/Home/DetailsSales/' + sale.Id" target="_blank"
                                class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
                                تفاصيل
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.3.4/vue.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="text/javascript">
        // Initialize data from server
        var initialData = @Html.Raw(data);

        const { createApp, ref, reactive } = Vue;

        // Vue.js implementation of the sales report functionality
        createApp({
            data() {
                return {
                    title: "تقرير اذون الصرف",
                    saleVMs: [],
                    searchDate: reactive({
                        startDate: '',
                        endDate: ''
                    }),
                    messages: [],
                    isLoading: false
                };
            },
            created() {
                // Initialize with server data if available
                if (window.initialData) {
                    this.saleVMs = window.initialData.SaleVMs || [];
                    this.searchDate.startDate = window.initialData.SearchDate?.StartDate || '';
                    this.searchDate.endDate = window.initialData.SearchDate?.EndDate || '';
                }
            },
            methods: {
                async loadReport() {
                    this.messages = [];
                    this.isLoading = true;

                    // Validate inputs
                    if (!this.searchDate.startDate || !this.searchDate.endDate) {
                        this.messages.push('يجب تحديد تاريخ البداية والنهاية');
                        return;
                    }

                    if (new Date(this.searchDate.startDate) > new Date(this.searchDate.endDate)) {
                        this.messages.push('تاريخ البداية يجب أن يكون قبل تاريخ النهاية');
                        return;
                    }

                    try {
                        const response = await axios.post('/Sales/Reports/LoadReport', this.searchDate);
                        this.saleVMs = response.data.SaleVMs || [];

                        if (this.saleVMs.length === 0) {
                            this.messages.push('لا توجد نتائج للعرض في الفترة المحددة');
                        }
                    } catch (error) {
                        console.error('Error loading report:', error);
                        this.messages.push('حدث خطأ أثناء تحميل التقرير');
                    } finally {
                        this.isLoading = false;
                    }
                },
                formatNumber(value) {
                    if (value === null || value === undefined || value === '') {
                        return '0';
                    }
                    return parseFloat(value).toLocaleString('ar-EG');
                },
                clearMessages() {
                    this.messages = [];
                }
            }
        }).mount('#app');
    </script>
}